// Generated by CoffeeScript 1.4.0
(function() {
  var Directions, directions, fps, lastframetime, prepare, svgDirections, svgStage,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  svgStage = 0;

  svgDirections = 0;

  directions = 0;

  fps = 30;

  lastframetime = new Date();

  requirejs(['jquery', 'd3', 'lodash', 'bootstrap'], function($, d3, _, bootstrap) {
    window.d3 = d3;
    return prepare();
  });

  prepare = function() {
    var addCounts, bininfo, color, data, evtSrc, gbincounts, height, img, initialize, line, margin, nframes, spanfps, width, x, xAxis, xaxis, y, yAxis;
    margin = {
      top: 20,
      right: 80,
      bottom: 30,
      left: 50
    };
    width = 900 - margin.left - margin.right;
    height = 300 - margin.top - margin.bottom;
    nframes = 500;
    x = d3.scaleLinear().range([0, width]).domain([0, nframes]);
    y = d3.scaleLinear().range([height, 0]).domain([0, 1]);
    color = d3.scaleOrdinal(d3.schemeCategory10);
    xAxis = d3.axisBottom().scale(x);
    yAxis = d3.axisLeft().scale(y);
    line = d3.line().x(function(d) {
      return x(d.frameid);
    }).y(function(d) {
      return y(d.count);
    });
    window.line = line;
    svgStage = d3.select("div#stage svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
    gbincounts = svgStage.append("g");
    xaxis = svgStage.append("g").attr("transform", "translate(0, " + height + ")").call(xAxis);
    img = d3.select("div#image").append("img").attr("class", "live");
    spanfps = d3.select("#fps");
    d3.select("#start").on("click", function() {
      console.log("start");
      $.ajax({
        type: "GET",
        url: "/stop",
        dataType: "json"
      });
      return $.ajax({
        type: "GET",
        url: "/begin",
        dataType: "json"
      });
    });
    d3.select("#stop").on("click", function() {
      console.log("stop");
      $.ajax({
        type: "GET",
        url: "/stop",
        dataType: "json"
      });
      return d3.select("#live").attr("style", "opacity:0");
    });
    directions = new Directions(d3.select("div#directions svg"));
    evtSrc = new EventSource("/subscribe");
    evtSrc.onmessage = function(e) {
      var newData;
      newData = JSON.parse(e.data);
      console.log("Received " + newData.signal);
      if (newData.signal === "newCounts") {
        return addCounts(newData);
      } else if (newData.signal === "initialize") {
        return initialize(newData);
      } else if (newData.signal === "decision") {
        return directions.activateTube(newData.directionid);
      }
    };
    evtSrc.onopen = function(e) {
      return d3.select("#connected").html("<span class='glyphicon glyphicon-link'></span>&nbsp;Verbonden");
    };
    evtSrc.onerror = function(e) {
      console.log(e);
      if (e.readyState === EventSource.CLOSED) {
        return d3.select("#connected").html("<span class='glyphicon glyphicon-send'></span>&nbsp;Reconnect?").attr("class", "btn btn-default");
      }
    };
    bininfo = 0;
    data = 0;
    initialize = function(initialData) {
      var binlines, enter, lastframe;
      data = initialData;
      window.data = data;
      bininfo = data.bins;
      _.forEach(bininfo, function(bin) {
        return bin.counts = data.bincounts[bin.id];
      });
      binlines = gbincounts.selectAll("path").data(bininfo);
      lastframe = data.bincounts.length;
      x.domain([lastframe - nframes, lastframe]);
      xaxis.call(xAxis);
      enter = binlines.enter().append("path");
      enter.merge(binlines).attr("class", "line").attr("d", function(d) {
        return line(_.map(d.counts, function(count, i) {
          return {
            count: count,
            frameid: data.frameids[i]
          };
        }));
      }).style("stroke", function(d) {
        return d.color;
      });
      data.frametimes = [];
      return directions.initialize(initialData);
    };
    return addCounts = function(newdata) {
      var binlines, enter, fpsFrames, i, lastframe, newfps, opa, smooth, _i, _ref;
      if (newdata.image) {
        lastframetime = new Date();
        img.attr("src", newdata.image);
        d3.select("#live").attr("style", "opacity:1");
        opa = data.frameids.length % 30;
        if (opa > 15) {
          opa = 15 - (opa - 15);
        }
        d3.select("#live2").attr("style", "opacity:" + opa / 15);
      }
      bininfo.forEach(function(info) {
        return Array.prototype.push.apply(info.counts, newdata.newcounts[info.id]);
      });
      data.frameids.push(data.frameids[data.frameids.length - 1] + 1);
      binlines = gbincounts.selectAll("path").data(bininfo);
      lastframe = data.frameids[data.frameids.length - 1];
      x.domain([lastframe - nframes, lastframe]);
      enter = binlines.enter().append("path");
      enter.merge(binlines).attr("d", function(d) {
        return line(_.map(d.counts, function(count, i) {
          return {
            count: count,
            frameid: data.frameids[i]
          };
        }));
      });
      if (data.frameids.length > 2 * nframes) {
        bininfo.forEach(function(info) {
          return _.remove(info.counts, function(d, i) {
            return i < nframes;
          });
        });
        _.remove(data.frameids, function(d, i) {
          return i < nframes;
        });
      }
      xaxis.call(xAxis);
      for (i = _i = 0, _ref = newdata.newcounts[0].length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        data.frametimes.push(Date.now());
      }
      fpsFrames = 30;
      if (data.frametimes.length > fpsFrames) {
        newfps = fpsFrames / (Date.now() - data.frametimes[data.frametimes.length - fpsFrames - 1]) * 1000;
        smooth = 0.02;
        fps = fps + (newfps - fps) * smooth;
        return spanfps.text(Math.round(fps) + "fps");
      }
    };
  };

  Directions = (function() {

    function Directions(container) {
      this.container = container;
      this.positionTube = __bind(this.positionTube, this);

      this.width = 600;
      this.height = 600;
      this.container.attr("width", this.width).attr("height", this.height);
      this.margin = {
        top: 20,
        right: 20,
        bottom: 200,
        left: 20
      };
    }

    Directions.prototype.initialize = function(initialData) {
      var arc, garcs, gpictures, i, picwidth, pie,
        _this = this;
      this.container.html("");
      this.cupradius = 35;
      this.ncups = initialData.directions.length;
      this.tubestart = {
        x: 0,
        y: 10
      };
      this.cupsradius = 250;
      this.tubebranch = {
        x: 0,
        y: this.height - this.margin.bottom - this.cupsradius
      };
      this.tubeend = {
        x: 0,
        y: this.height - this.cupradius - this.margin.bottom
      };
      this.cupsarcangle = Math.PI / 2 * 1.2;
      this.cupsstartangle = Math.PI * 3 / 2 - this.cupsarcangle / 2;
      this.counts = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 1, _ref = initialData.directions.length; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          _results.push(0);
        }
        return _results;
      })();
      this.gbottom = this.container.append("g").attr("transform", "translate(" + (this.width / 2) + ", " + this.tubeend.y + ")");
      arc = d3.arc().outerRadius(this.cupradius).innerRadius(0);
      pie = d3.pie().sort(null).value(1);
      this.gcups = this.gbottom.selectAll("g").data(initialData.directions).enter().append("g").attr("transform", function(d, i) {
        var cupCenter;
        cupCenter = _this.getCupCenter(i);
        return "translate(" + cupCenter.x + ", " + cupCenter.y + ")";
      });
      garcs = this.gcups.selectAll(".arc").data(function(d) {
        return pie(d.colors);
      }).enter().append("g").attr("class", "arc");
      garcs.append("path").attr("d", arc).style("fill", function(d) {
        return d.data;
      }).style("stroke", "black").style("stroke-width", "2");
      this.gcounters = this.gcups.selectAll("text").data(function(d, i) {
        return [_this.counts[i]];
      }).enter().append("text").attr("class", "counter").attr("style", "transform:translate(0px, 80px);font-size:16px;text-anchor:middle").text(function(d) {
        return d;
      });
      picwidth = 100;
      gpictures = this.gcups.selectAll("image").data(function(d) {
        return [d.picture];
      }).enter().append("image").attr("xlink:href", function(d) {
        return "static/img/immuuncellen/" + d + ".svg";
      }).attr("width", picwidth + "px").attr("height", picwidth + "px").attr("style", "transform:translate(-" + picwidth / 2 + "px, 120px);");
      this.gtubes = this.container.append("g").attr("transform", "translate(" + (this.width / 2) + ", " + this.margin.top + ")");
      this.ginactivetubes = this.gtubes.append("g");
      this.ginactivetubes.selectAll("path").data(initialData.directions).enter().append("path").attr("d", function(d, i) {
        return _this.positionTube(i);
      }).style("stroke", "#444444").style("fill", "none").style("stroke-width", "20").style("stroke-opacity", "0.5");
      this.activetube = this.gtubes.append("g").selectAll("path").data([0]).enter().append("path").style("stroke", "#222222").style("fill", "none").style("stroke-width", "20");
      return this.activateTube(-1, false);
    };

    Directions.prototype.getCupCenter = function(i) {
      var angle;
      if (i === -1) {
        return {
          x: 0,
          y: 0
        };
      } else {
        angle = this.cupsstartangle + i / (this.ncups - 1) * this.cupsarcangle;
        return {
          x: Math.cos(angle) * this.cupsradius,
          y: -Math.sin(angle) * this.cupsradius - this.cupsradius
        };
      }
    };

    Directions.prototype.positionTube = function(i) {
      var cupCenter;
      cupCenter = this.getCupCenter(i);
      return ("M" + this.tubestart.x + "," + this.tubestart.y + " L" + this.tubebranch.x + "," + this.tubebranch.y + " ") + ("L" + (cupCenter.x + this.tubeend.x) + "," + (cupCenter.y + this.tubeend.y - this.cupradius));
    };

    Directions.prototype.activateTube = function(i, count) {
      var _this = this;
      if (count == null) {
        count = true;
      }
      if (count) {
        this.counts[i] = this.counts[i] + 1;
        this.gcounters = this.gcups.selectAll("text").data(function(d, i) {
          return [_this.counts[i]];
        }).text(function(d) {
          return d;
        }).style("font-size", function(d) {
          return (16 + d * 5) + "px";
        });
      }
      if (count) {
        return this.activetube.data([i]).style("stroke", "red").transition().duration(500).attr("d", function(d) {
          return _this.positionTube(d);
        }).transition().delay(500).duration(500).style("stroke", "#222222").attr("d", function(d) {
          return _this.positionTube((_this.counts.length - 1) / 2);
        });
      } else {
        return this.activetube.data([i]).attr("d", function(d) {
          return _this.positionTube(d);
        });
      }
    };

    return Directions;

  })();

  window.setInterval(function() {
    var diff, now;
    now = new Date();
    diff = now.getSeconds() - lastframetime.getSeconds();
    if (diff > 1) {
      return d3.select("#live").attr("style", "opacity:0");
    }
  }, 300);

}).call(this);
